
(car '(1 2 3)) ; 1
(cadr '(1 2 3)) ; 2
(caddr '(1 2 3)) ; 3
(fifth '(1 2 3 4 5 6)) ; 5

(take 3 '(1 2 3 4 5 6)) ; (1 2 3)
(drop 3 '(1 2 3 4 5 6)) ; (4 5 6)

(take-right 2 '(a b c d e)) ; (d e)
(drop-right 2 '(a b c d e)) ; (a b c)

(last '(a b c)) ; c

(length '(1 2 3 4)) ; 4

; (append '(x) '(y))        ;  (x y)
; (append '(a) '(b c d))    ;  (a b c d)
; (append '(a (b)) '((c)))  ;  (a (b) (c))

(concat '(a b) '(c d)) ; (a b c d)
(concat '() '(c d)) ; (c d)
(concat '(a b) '()) ; (a b)

(reverse '(1 2 3 4 5 6)) ; (6 5 4 3 2 1)

(zip1 '(1 2 3)) ; ((1) (2) (3))
(zip2 '(1 2 3) '(a b c)) ; ((1 a) (2 b) (3 c))
(zip2 '(1 2 3) '(a b)) ; ((1 a) (2 b))
(zip2 '(1 2) '(a b c)) ; ((1 a) (2 b))

(unzip1 '((1 one) (2 two) (3 three))) ; (1 2 3)

(fold1 cons '() '(1 2 3 4)) ; (4 3 2 1)
(fold1 cons '(1 2) '(3 4)) ; (4 3 2 1)

(unfold (fn [x] (> x 10))
        (fn [x] (* x x))
        (fn [x] (+ x 1))
        1
        (fn [x] '()))
; (1 4 9 16 25 36 49 64 81 100)

(unfold-right zero?
              (lambda (x) (* x x))
              (lambda (x) (- x 1))
              10
              '())

(map1 cadr '((a b) (d e) (g h))) ; (b e h)

(defn expt [n m]
  (loop [i 0 res 1]
    (if (< i m)
      (recur (+ i 1) (* res n))
      res)))

(map1 (fn [n] (expt n n)) '(1 2 3 4 5)) ; (1 4 27 256 3125)


(filter even? '(1 2 3 4 5 6)) ; (2 4 6)


(find (fn [x] (= x 5)) '(1 2 3 4 5 6))
(find (fn [x] (= x 6)) '(1 2 3 4 5 6))
(find (fn [x] (= x 7)) '(1 2 3 4 5 6))

(find-tail even? '(3 1 37 -8 -5 0 0)) ; (-8 -5 0 0)
(find-tail even? '(3 1 37 -5)) ; false
(take-while even? '(2 18 3 10 22 9)) ; (2 18)
(take-while even? '(1 3 7)) ; ()
(drop-while even? '(2 18 3 10 22 9)) ; (3 10 22 9)


;     (span even? '(2 18 3 10 22 9)) =>
;       (2 18)
;       (3 10 22 9)
; 
;     (break even? '(3 1 4 1 5 9)) =>
;       (3 1)
;       (4 1 5 9)


; (any1 integer? '(a 3 b 2.7))
(any1 boolean? '(a 3 b 2)) ; false
(any1 boolean? '(a 3 true 7)) ; true
(every1 number? '(1 3 a 0 7)) ; false
(every1 number? '(1 3 0 7)) ; true
(every1 number? '()) ; true

; (list-index even? '(3 1 4 1 5 9)) => 2
; (list-index < '(3 1 4 1 5 9 2 5 6) '(2 7 1 8 2)) => 1
; (list-index = '(3 1 4 1 5 9 2 5 6) '(2 7 1 8 2)) => #f
(list-index1 even? '(3 1 4 1 5 9)) ; 2


(define xs '(1 2 3))
(set-car! xs 0)
xs ; (0 2 3)
(set-cdr! xs '(4 5))
xs ; (0 4 5)

