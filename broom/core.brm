
(def defmacro
        (macro [name xs body]
               (list 'def name (list 'macro xs body))))

(defmacro identity [expr]
    expr)

(defmacro when [expr form]
    (list 'if expr form '()))

(defmacro lambda [xs body]
    (list 'fn (List2Arr xs) body))

(defmacro defn [name args body]
    (list 'def name (list 'fn args body)))

(defmacro define [name expr] (list 'def name expr))
;
;    [(name args) body]
;        ('defn name [args] body))

(defn even? [x]
    (= (mod x 2) 0))

(defn zero? [x]
    (= x 0))

