(not false) ; true, builtin

(zero? 0) ; true
(zero? 1) ; false

(even? 1) ; false
(even? 2) ; true
(even? 3) ; false

(identity (+ 1 2 3))

(when true
    (println "hi macro"))


(def foo (fn [x & xs]
             (begin
                 (println x)
                 (println xs)
                 xs)))
(foo 1 2 3 4 5)
    
(defn bar [x & xs]
    (begin
        (println x)
        (println xs)
        xs))

(bar 1 2 3 4 5)
    
