
(def defmacro
        (macro [name xs & body]
               (list 'def name (cons 'macro (cons xs (Slice2List body))))))

(defmacro identity [expr]
    expr)

(defmacro when [expr & form]
    (list 'if expr (cons 'begin (Slice2List form)) '()))

(defmacro lambda [xs body]
    (list 'fn (Seq2Slice xs) body))

(defmacro defn [name args body]
    (let [_defn_arg args]
        (if (array? _defn_arg)
            (list 'def name (list 'fn _defn_arg body))
            (panic "expectd array for parameter list"))))

(defmacro define [name expr] (list 'def name expr))
;
;    [(name args) body]
;        ('defn name [args] body))

(defn even? [x]
    (= (mod x 2) 0))

(defn zero? [x]
    (= x 0))

(def else true) ; for cond
(defmacro cond [test action & rest]
    (list 'if test action (cons 'cond (Slice2List rest))))
